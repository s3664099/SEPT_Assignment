{"version":3,"sources":["Constants.js","components/todo/AuthenticationService.js","components/todo/AuthenticatedRoute.jsx","components/todo/LoginComponent.jsx","api/todo/TodoDataService.js","components/todo/ListTodosComponent.jsx","components/todo/ErrorComponent.jsx","components/todo/HeaderComponent.jsx","components/todo/FooterComponent.jsx","components/todo/LogoutComponent.jsx","api/todo/HelloWorldService.js","components/todo/WelcomeComponent.jsx","components/todo/TodoComponent.jsx","components/wall/Suggestions.jsx","components/wall/Search.jsx","components/wall/HeaderWall.jsx","components/wall/SideNavBar.jsx","api/todo/WallDataService.js","components/wall/AuthenticationService.js","components/wall/PostContainer.jsx","components/wall/ActivityNavBar.jsx","components/wall/WallComponent.jsx","components/todo/TodoApp.jsx","App.js","serviceWorker.js","index.js"],"names":["API_URL","JPA_API_URL","todo_AuthenticationService","username","password","axios","get","concat","headers","authorization","this","createBasicAuthToken","post","window","btoa","sessionStorage","setItem","setupAxiosInterceptors","token","createJWTToken","removeItem","getItem","user","_this","interceptors","request","use","config","isUserLoggedIn","AuthenticatedRoute","AuthenticationService","react_default","a","createElement","Route","props","Redirect","to","Component","LoginComponent","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasLoginFailed","showSuccessMessage","handleChange","bind","assertThisInitialized","loginClicked","event","setState","defineProperty","target","name","value","_this2","executeJwtAuthenticationService","then","response","registerSuccessfulLoginForJwt","data","history","push","catch","className","type","onChange","onClick","todo_TodoDataService","id","delete","todo","put","ListTodosComponent","console","log","todos","message","deleteTodoClicked","updateTodoClicked","addTodoClicked","refreshTodos","nextProps","nextState","getLoggedInUserName","TodoDataService","retrieveAllTodos","_this3","deleteTodo","_this4","class","map","key","description","moment","targetDate","format","done","toString","ErrorComponent","HeaderComponent","href","Link","logout","FooterComponent","LogoutComponent","Fragment","todo_HelloWorldService","WelcomeComponent","retrieveWelcomeMessage","welcomeMessage","handleSuccessfulResponse","handleError","match","params","HelloWorldService","executeHelloWorldPathVariableService","error","errorMessage","TodoComponent","Date","onSubmit","validate","retrieveTodo","values","errors","length","isValid","createTodo","updateTodo","_this$state","formik_esm","initialValues","validateOnChange","validateOnBlur","enableReinitialize","component","Suggestions","options","results","r","Search","process","API_KEY","query","getInfo","res","handleInputChange","search","placeholder","ref","input","buttonClicked","wall_Suggestions","HeaderWall","wall_Search","src","SideNavBar","todo_WallDataService","parentPostId","wall_AuthenticationService","PostContainer","isLoaded","posts","WallDataService","retrieveAllVisiblePosts","json","result","index","creation_Time","comments","commentBox","indexb","ActivityNavBar","reactjs_popup_es","trigger","modal","closeOnDocumentClick","action","rows","cols","wallComponent","userName","components_wall_HeaderWall","components_wall_SideNavBar","wall_ActivityNavBar","components_wall_PostContainer","TodoApp","BrowserRouter","todo_HeaderComponent","Switch","path","exact","todo_AuthenticatedRoute","WallComponent","todo_FooterComponent","App","todo_TodoApp","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kYAAaA,EAAU,wBACVC,EAAc,4BCoEZC,EAAA,8HA9DuBC,EAAUC,GACxC,OAAOC,IAAMC,IAAN,GAAAC,OAAaP,EAAb,cACH,CAAEQ,QAAS,CAAEC,cAAeC,KAAKC,qBAAqBR,EAAUC,8DAGxCD,EAAUC,GACtC,OAAOC,IAAMO,KAAN,GAAAL,OAAcP,EAAd,iBAAsC,CACzCG,WACAC,0DAIaD,EAAUC,GAC3B,MAAO,SAAWS,OAAOC,KAAKX,EAAW,IAAMC,mDAG3BD,EAAUC,GAG9BW,eAAeC,QAvByB,oBAuBiBb,GACzDO,KAAKO,uBAAuBP,KAAKC,qBAAqBR,EAAUC,0DAGtCD,EAAUe,GACpCH,eAAeC,QA5ByB,oBA4BiBb,GACzDO,KAAKO,uBAAuBP,KAAKS,eAAeD,2CAGrCA,GACX,MAAO,UAAYA,mCAKnBH,eAAeK,WAtCyB,8DA2CxC,OAAa,OADFL,eAAeM,QA1Cc,mEAgDxC,IAAIC,EAAOP,eAAeM,QAhDc,qBAiDxC,OAAa,OAATC,EAAsB,GACnBA,iDAGYJ,GAAO,IAAAK,EAAAb,KAE1BL,IAAMmB,aAAaC,QAAQC,IACvB,SAACC,GAIG,OAHIJ,EAAKK,mBACLD,EAAOnB,QAAQC,cAAgBS,GAE5BS,cChDRE,mLATP,OAAIC,EAAsBF,iBACfG,EAAAC,EAAAC,cAACC,EAAA,EAAUxB,KAAKyB,OAEhBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAUC,GAAG,kBALCC,4BC6FlBC,cA5FX,SAAAA,EAAYJ,GAAO,IAAAZ,EAAA,OAAAiB,OAAAC,EAAA,EAAAD,CAAA9B,KAAA6B,IACfhB,EAAAiB,OAAAE,EAAA,EAAAF,CAAA9B,KAAA8B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAlC,KAAMyB,KAEDU,MAAQ,CACT1C,SAAU,OACVC,SAAU,GACV0C,gBAAgB,EAChBC,oBAAoB,GAIxBxB,EAAKyB,aAAezB,EAAKyB,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAjB,KACpBA,EAAK4B,aAAe5B,EAAK4B,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAjB,KAZLA,4EAeN6B,GAET1C,KAAK2C,SAALb,OAAAc,EAAA,EAAAd,CAAA,GAESY,EAAMG,OAAOC,KACRJ,EAAMG,OAAOE,+CAoBhB,IAAAC,EAAAhD,KAsBXoB,EACK6B,gCAAgCjD,KAAKmC,MAAM1C,SAAUO,KAAKmC,MAAMzC,UAChEwD,KAAK,SAACC,GACH/B,EAAsBgC,8BAA8BJ,EAAKb,MAAM1C,SAAU0D,EAASE,KAAK7C,OACvFwC,EAAKvB,MAAM6B,QAAQC,KAAnB,YAAA1D,OAAoCmD,EAAKb,MAAM1C,aAChD+D,MAAM,WACLR,EAAKL,SAAS,CAAEN,oBAAoB,IACpCW,EAAKL,SAAS,CAAEP,gBAAgB,uCAMxC,OACIf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,aAEVzD,KAAKmC,MAAMC,gBAAkBf,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,uBAAf,6CAC7BzD,KAAKmC,MAAME,oBAAsBhB,EAAAC,EAAAC,cAAA,8BAHtC,cAKeF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,OAAOZ,KAAK,WAAWC,MAAO/C,KAAKmC,MAAM1C,SAAUkE,SAAU3D,KAAKsC,eAL7F,aAMcjB,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,WAAWZ,KAAK,WAAWC,MAAO/C,KAAKmC,MAAMzC,SAAUiE,SAAU3D,KAAKsC,eAC5FjB,EAAAC,EAAAC,cAAA,UAAQkC,UAAU,kBAAkBG,QAAS5D,KAAKyC,cAAlD,kBAvFSb,aC6BdiC,EAAA,6GA3BMf,GAEb,OAAOnD,IAAMC,IAAN,GAAAC,OAAaN,EAAb,WAAAM,OAAkCiD,yCAGhCA,EAAMgB,GAEf,OAAOnE,IAAMC,IAAN,GAAAC,OAAaN,EAAb,WAAAM,OAAkCiD,EAAlC,WAAAjD,OAAgDiE,uCAGhDhB,EAAMgB,GAEb,OAAOnE,IAAMoE,OAAN,GAAAlE,OAAgBN,EAAhB,WAAAM,OAAqCiD,EAArC,WAAAjD,OAAmDiE,uCAGnDhB,EAAMgB,EAAIE,GAEjB,OAAOrE,IAAMsE,IAAN,GAAApE,OAAaN,EAAb,WAAAM,OAAkCiD,EAAlC,WAAAjD,OAAgDiE,GAAME,sCAGtDlB,EAAMkB,GAEb,OAAOrE,IAAMO,KAAN,GAAAL,OAAcN,EAAd,WAAAM,OAAmCiD,EAAnC,WAAkDkB,8BC8FlDE,cAnHX,SAAAA,EAAYzC,GAAO,IAAAZ,EAAA,OAAAiB,OAAAC,EAAA,EAAAD,CAAA9B,KAAAkE,GACfC,QAAQC,IAAI,gBACZvD,EAAAiB,OAAAE,EAAA,EAAAF,CAAA9B,KAAA8B,OAAAG,EAAA,EAAAH,CAAAoC,GAAAhC,KAAAlC,KAAMyB,KACDU,MAAQ,CACTkC,MAAO,GACPC,QAAS,MAEbzD,EAAK0D,kBAAoB1D,EAAK0D,kBAAkBhC,KAAvBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAjB,KACzBA,EAAK2D,kBAAoB3D,EAAK2D,kBAAkBjC,KAAvBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAjB,KACzBA,EAAK4D,eAAiB5D,EAAK4D,eAAelC,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAjB,KACtBA,EAAK6D,aAAe7D,EAAK6D,aAAanC,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAjB,KAVLA,sFAcfsD,QAAQC,IAAI,sEAGMO,EAAWC,GAI7B,OAHAT,QAAQC,IAAI,yBACZD,QAAQC,IAAIO,GACZR,QAAQC,IAAIQ,IACL,8CAIPT,QAAQC,IAAI,qBACZpE,KAAK0E,eACLP,QAAQC,IAAIpE,KAAKmC,8CAGN,IAAAa,EAAAhD,KACPP,EAAW2B,EAAsByD,sBACrCC,EAAgBC,iBAAiBtF,GAC5ByD,KACG,SAAAC,GAEIH,EAAKL,SAAS,CAAE0B,MAAOlB,EAASE,mDAK9BS,GAAI,IAAAkB,EAAAhF,KACdP,EAAW2B,EAAsByD,sBAErCC,EAAgBG,WAAWxF,EAAUqE,GAChCZ,KACG,SAAAC,GACI6B,EAAKrC,SAAS,CAAE2B,QAAO,kBAAAzE,OAAoBiE,EAApB,iBACvBkB,EAAKN,0DAOjB1E,KAAKyB,MAAM6B,QAAQC,KAAnB,uDAGcO,GACdK,QAAQC,IAAI,UAAYN,GACxB9D,KAAKyB,MAAM6B,QAAQC,KAAnB,UAAA1D,OAAkCiE,qCAc7B,IAAAoB,EAAAlF,KAEL,OADAmE,QAAQC,IAAI,UAER/C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,wBACCvB,KAAKmC,MAAMmC,SAAWjD,EAAAC,EAAAC,cAAA,OAAK4D,MAAM,uBAAuBnF,KAAKmC,MAAMmC,SACpEjD,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,aACXpC,EAAAC,EAAAC,cAAA,SAAOkC,UAAU,SACbpC,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,sBAGRF,EAAAC,EAAAC,cAAA,aAEQvB,KAAKmC,MAAMkC,MAAMe,IACb,SAAApB,GAAI,OACA3C,EAAAC,EAAAC,cAAA,MAAI8D,IAAKrB,EAAKF,IACVzC,EAAAC,EAAAC,cAAA,UAAKyC,EAAKsB,aACVjE,EAAAC,EAAAC,cAAA,UAAKgE,IAAOvB,EAAKwB,YAAYC,OAAO,eACpCpE,EAAAC,EAAAC,cAAA,UAAKyC,EAAK0B,KAAKC,YACftE,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQkC,UAAU,kBAAkBG,QAAS,kBAAMsB,EAAKV,kBAAkBR,EAAKF,MAA/E,WACJzC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQkC,UAAU,kBAAkBG,QAAS,kBAAMsB,EAAKX,kBAAkBP,EAAKF,MAA/E,gBAM5BzC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,OACXpC,EAAAC,EAAAC,cAAA,UAAQkC,UAAU,kBAAkBG,QAAS5D,KAAKyE,gBAAlD,iBA5GS7C,aCClBgE,MAJf,WACI,OAAOvE,EAAAC,EAAAC,cAAA,qGC4BIsE,mLAxBP,IAAM3E,EAAiBE,EAAsBF,iBAG7C,OACIG,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,+CACXpC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGuE,KAAK,2BAA2BrC,UAAU,gBAA7C,SACLpC,EAAAC,EAAAC,cAAA,MAAIkC,UAAU,cACTvC,GAAkBG,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAMtC,UAAU,WAAW9B,GAAG,iBAA9B,SACtBT,GAAkBG,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAMtC,UAAU,WAAW9B,GAAG,UAA9B,UAEtBT,GAAkBG,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAMtC,UAAU,WAAW9B,GAAG,SAA9B,WAG3BN,EAAAC,EAAAC,cAAA,MAAIkC,UAAU,mDACRvC,GAAkBG,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAMtC,UAAU,WAAW9B,GAAG,UAA9B,UACvBT,GAAkBG,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAMtC,UAAU,WAAW9B,GAAG,UAAUiC,QAASxC,EAAsB4E,QAAvE,qBAlBjBpE,aCOfqE,mLARP,OACI5E,EAAAC,EAAAC,cAAA,UAAQkC,UAAU,UACdpC,EAAAC,EAAAC,cAAA,QAAMkC,UAAU,cAAhB,+CAJc7B,aCafsE,mLAXP,OACI7E,EAAAC,EAAAC,cAAAF,EAAAC,EAAA6E,SAAA,KACI9E,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,aAAf,gDALc7B,aC+BfwE,EAAA,uHA3BP,OAAOzG,IAAMC,IAAI,4FAKjB,OAAOD,IAAMC,IAAI,uGAGgBkD,GAOjC,OAAOnD,IAAMC,IAAN,mDAAAC,OAA6DiD,cCoD7DuD,cAnEX,SAAAA,EAAY5E,GAAO,IAAAZ,EAAA,OAAAiB,OAAAC,EAAA,EAAAD,CAAA9B,KAAAqG,IACfxF,EAAAiB,OAAAE,EAAA,EAAAF,CAAA9B,KAAA8B,OAAAG,EAAA,EAAAH,CAAAuE,GAAAnE,KAAAlC,KAAMyB,KACD6E,uBAAyBzF,EAAKyF,uBAAuB/D,KAA5BT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAjB,KAC9BA,EAAKsB,MAAQ,CACToE,eAAgB,IAEpB1F,EAAK2F,yBAA2B3F,EAAK2F,yBAAyBjE,KAA9BT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAjB,KAChCA,EAAK4F,YAAc5F,EAAK4F,YAAYlE,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAjB,KAPJA,wEAWf,OACIQ,EAAAC,EAAAC,cAAAF,EAAAC,EAAA6E,SAAA,KACI9E,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,aAAf,WACazD,KAAKyB,MAAMiF,MAAMC,OAAO7D,KADrC,+BAE8BzB,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAMpE,GAAG,UAAT,QAF9B,KAIAN,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,aAAf,kDAEIpC,EAAAC,EAAAC,cAAA,UAAQqC,QAAS5D,KAAKsG,uBAClB7C,UAAU,mBADd,wBAGJpC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,aACVzD,KAAKmC,MAAMoE,kEAOH,IAAAvD,EAAAhD,KAOrB4G,EAAkBC,qCAAqC7G,KAAKyB,MAAMiF,MAAMC,OAAO7D,MAC1EI,KAAK,SAAAC,GAAQ,OAAIH,EAAKwD,yBAAyBrD,KAC/CK,MAAM,SAAAsD,GAAK,OAAI9D,EAAKyD,YAAYK,sDAGhB3D,GACrBgB,QAAQC,IAAIjB,GACZnD,KAAK2C,SAAS,CAAE4D,eAAgBpD,EAASE,KAAKiB,8CAGtCwC,GAER3C,QAAQC,IAAI0C,EAAM3D,UAElB,IAAI4D,EAAe,GAEfD,EAAMxC,UACNyC,GAAgBD,EAAMxC,SAEtBwC,EAAM3D,UAAY2D,EAAM3D,SAASE,OACjC0D,GAAgBD,EAAM3D,SAASE,KAAKiB,SAGxCtE,KAAK2C,SAAS,CAAE4D,eAAgBQ,WA/DTnF,qBCgHhBoF,cA7GX,SAAAA,EAAYvF,GAAO,IAAAZ,EAAA,OAAAiB,OAAAC,EAAA,EAAAD,CAAA9B,KAAAgH,IACfnG,EAAAiB,OAAAE,EAAA,EAAAF,CAAA9B,KAAA8B,OAAAG,EAAA,EAAAH,CAAAkF,GAAA9E,KAAAlC,KAAMyB,KAEDU,MAAQ,CACT2B,GAAIjD,EAAKY,MAAMiF,MAAMC,OAAO7C,GAC5BwB,YAAa,GACbE,WAAYD,IAAO,IAAI0B,MAAQxB,OAAO,eAG1C5E,EAAKqG,SAAWrG,EAAKqG,SAAS3E,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAjB,KAChBA,EAAKsG,SAAWtG,EAAKsG,SAAS5E,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAjB,KAVDA,mFAcC,IAAAmC,EAAAhD,KAEhB,IAAuB,IAAnBA,KAAKmC,MAAM2B,GAAf,CAIA,IAAIrE,EAAW2B,EAAsByD,sBAErCC,EAAgBsC,aAAa3H,EAAUO,KAAKmC,MAAM2B,IAC7CZ,KAAK,SAAAC,GAAQ,OAAIH,EAAKL,SAAS,CAC5B2C,YAAanC,EAASE,KAAKiC,YAC3BE,WAAYD,IAAOpC,EAASE,KAAKmC,YAAYC,OAAO,oDAIvD4B,GACL,IAAIC,EAAS,GAWb,OAVKD,EAAO/B,YAED+B,EAAO/B,YAAYiC,OAAS,IACnCD,EAAOhC,YAAc,6CAFrBgC,EAAOhC,YAAc,sBAKpBC,IAAO8B,EAAO7B,YAAYgC,YAC3BF,EAAO9B,WAAa,6BAGjB8B,mCAIFD,GAAQ,IAAArC,EAAAhF,KACTP,EAAW2B,EAAsByD,sBAEjCb,EAAO,CACPF,GAAI9D,KAAKmC,MAAM2B,GACfwB,YAAa+B,EAAO/B,YACpBE,WAAY6B,EAAO7B,aAGA,IAAnBxF,KAAKmC,MAAM2B,GACXgB,EAAgB2C,WAAWhI,EAAUuE,GAChCd,KAAK,kBAAM8B,EAAKvD,MAAM6B,QAAQC,KAAK,YAExCuB,EAAgB4C,WAAWjI,EAAUO,KAAKmC,MAAM2B,GAAIE,GAC/Cd,KAAK,kBAAM8B,EAAKvD,MAAM6B,QAAQC,KAAK,YAG5CY,QAAQC,IAAIiD,oCAGP,IAAAM,EAE6B3H,KAAKmC,MAAjCmD,EAFDqC,EAECrC,YAAaE,EAFdmC,EAEcnC,WAGnB,OACInE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,aACXpC,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CACIC,cAAe,CAAEvC,cAAaE,cAC9B0B,SAAUlH,KAAKkH,SACfY,kBAAkB,EAClBC,gBAAgB,EAChBZ,SAAUnH,KAAKmH,SACfa,oBAAoB,GAGhB,SAACvG,GAAD,OACIJ,EAAAC,EAAAC,cAACqG,EAAA,EAAD,KACIvG,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAc9E,KAAK,cAAcmF,UAAU,MACvCxE,UAAU,wBACdpC,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAc9E,KAAK,aAAamF,UAAU,MACtCxE,UAAU,wBACdpC,EAAAC,EAAAC,cAAA,YAAUkC,UAAU,cAChBpC,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAOnE,UAAU,eAAeC,KAAK,OAAOZ,KAAK,iBAErDzB,EAAAC,EAAAC,cAAA,YAAUkC,UAAU,cAChBpC,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAOnE,UAAU,eAAeC,KAAK,OAAOZ,KAAK,gBAErDzB,EAAAC,EAAAC,cAAA,UAAQkC,UAAU,kBAAkBC,KAAK,UAAzC,oBAlGR9B,aCKbsG,SATK,SAACzG,GACnB,IAAM0G,EAAU1G,EAAM2G,QAAQhD,IAAI,SAAAiD,GAAC,OACjChH,EAAAC,EAAAC,cAAA,MAAI8D,IAAKgD,EAAEvE,IACRuE,EAAEvF,QAGP,OAAOzB,EAAAC,EAAAC,cAAA,UAAK4G,KC8CCG,GAlDKC,8CAAZC,mNAINrG,MAAQ,CACNsG,MAAO,GACPL,QAAS,MAGXM,QAAU,WACR,IAAM9H,EAAO,CACXkC,KAAMjC,EAAKsB,MAAMsG,OAGnB9I,IAAMC,IAAN,6CAAwD,CAACgB,SACxDsC,KAAK,SAAAyF,GAEJ9H,EAAK8B,SAAS,CAACyF,QAAUO,EAAItF,YAIjCuF,kBAAoB,WAClB/H,EAAK8B,SAAS,CACZ8F,MAAO5H,EAAKgI,OAAO9F,OAClB,WACGlC,EAAKsB,MAAMsG,OAAS5H,EAAKsB,MAAMsG,MAAMlB,OAAS,GAC5C1G,EAAKsB,MAAMsG,MAAMlB,OAAS,IAAM,GAClC1G,EAAK6H,qFAMJ,IAAA1F,EAAAhD,KACP,OACEqB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SACEmC,KAAK,OACLoF,YAAY,gBACZC,IAAK,SAAAC,GAAK,OAAIhG,EAAK6F,OAASG,GAC5BrF,SAAU3D,KAAK4I,kBACf7F,MAAO/C,KAAKmC,MAAMsG,QAEpBpH,EAAAC,EAAAC,cAAA,UAAQmC,KAAK,SAASE,QAAS5D,KAAKiJ,eAApC,UACA5H,EAAAC,EAAAC,cAAC2H,EAAD,CAAad,QAASpI,KAAKmC,MAAMiG,kBAzCpBxG,cC+BNuH,cA/BX,SAAAA,EAAY1H,GAAO,OAAAK,OAAAC,EAAA,EAAAD,CAAA9B,KAAAmJ,GAAArH,OAAAE,EAAA,EAAAF,CAAA9B,KAAA8B,OAAAG,EAAA,EAAAH,CAAAqH,GAAAjH,KAAAlC,KACTyB,0EAKD,OAEDJ,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,WACXpC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,YACXpC,EAAAC,EAAAC,cAAA,KAAGkC,UAAW,YAAd,aAGJpC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,UACZpC,EAAAC,EAAAC,cAAC6H,EAAD,OAGH/H,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,aAAf,YACczD,KAAKyB,MAAMqB,KACrBzB,EAAAC,EAAAC,cAAA,OAAKkC,UAAW,aAAa4F,IAAI,6CAtBhCzH,aCYV0H,0LAXP,OACIjI,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,WACXpC,EAAAC,EAAAC,cAAA,KAAGuE,KAAK,KAAR,QACAzE,EAAAC,EAAAC,cAAA,KAAGuE,KAAK,KAAR,QACAzE,EAAAC,EAAAC,cAAA,KAAGuE,KAAK,KAAR,QACAzE,EAAAC,EAAAC,cAAA,KAAGuE,KAAK,KAAR,gBAPSlE,cCqCV2H,SAAA,oHAlCazG,GAEpB,OAAOnD,IAAMC,IAAN,GAAAC,OAAaN,EAAb,eAAAM,OAAsCiD,EAAtC,6CAcAA,EAAM5C,GAEb,OAAOP,IAAMO,KAAN,SAAAL,OAvBA,EAuBA,iDAGGiD,EAAM5C,EAAMsJ,GAEtB,OAAO7J,IAAMO,KAAN,GAAAL,OAAcN,EAAd,WAAAM,OA5BA,EA4BA,WAAAA,OAAsD2J,GAAgBtJ,oCAGxE4C,EAAM5C,GACd,OAAOP,IAAMO,KAAN,GAAAL,OAAcN,EAAd,WAAAM,OAhCG,EAgCH,UAAsDK,cCmCnDuJ,EAAA,8HA9DuBhK,EAAUC,GACxC,OAAOC,IAAMC,IAAN,GAAAC,OAAaP,EAAb,cACH,CAAEQ,QAAS,CAAEC,cAAeC,KAAKC,qBAAqBR,EAAUC,8DAGxCD,EAAUC,GACtC,OAAOC,IAAMO,KAAN,GAAAL,OAAcP,EAAd,iBAAsC,CACzCG,WACAC,0DAIaD,EAAUC,GAC3B,MAAO,SAAWS,OAAOC,KAAKX,EAAW,IAAMC,mDAG3BD,EAAUC,GAG9BW,eAAeC,QAvByB,oBAuBiBb,GACzDO,KAAKO,uBAAuBP,KAAKC,qBAAqBR,EAAUC,0DAGtCD,EAAUe,GACpCH,eAAeC,QA5ByB,oBA4BiBb,GACzDO,KAAKO,uBAAuBP,KAAKS,eAAeD,2CAGrCA,GACX,MAAO,UAAYA,mCAKnBH,eAAeK,WAtCyB,8DA2CxC,OAAa,OADFL,eAAeM,QA1Cc,mEAgDxC,IAAIC,EAAOP,eAAeM,QAhDc,qBAiDxC,OAAa,OAATC,EAAsB,GACnBA,iDAGYJ,GAAO,IAAAK,EAAAb,KAE1BL,IAAMmB,aAAaC,QAAQC,IACvB,SAACC,GAIG,OAHIJ,EAAKK,mBACLD,EAAOnB,QAAQC,cAAgBS,GAE5BS,cCsBRyI,cAzEX,SAAAA,EAAYjI,GAAM,IAAAZ,EAAA,OAAAiB,OAAAC,EAAA,EAAAD,CAAA9B,KAAA0J,IACd7I,EAAAiB,OAAAE,EAAA,EAAAF,CAAA9B,KAAA8B,OAAAG,EAAA,EAAAH,CAAA4H,GAAAxH,KAAAlC,KAAMyB,KACDU,MAAO,CACR2E,MAAQ,KACR6C,UAAU,EACVC,MAAM,IALI/I,mFASC,IAAAmC,EAAAhD,KACZP,EAAW2B,EAAsByD,sBACrCgF,EAAgBC,wBAAwBrK,GACtCyD,KAAK,SAAAyF,GAAG,OAAEA,EAAIoB,SACd7G,KACG,SAAC8G,GACGhH,EAAKL,SAAS,CACXgH,UAAS,EACTC,MAAMI,KAGb,SAAClD,GACG9D,EAAKL,SAAS,CACVgH,UAAS,EACT7C,6CASZ,OACWzF,EAAAC,EAAAC,cAAA,WAEIvB,KAAKmC,MAAMyH,MAAMxE,IAAI,SAAClF,EAAK+J,GAAN,OACpB5I,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,iBACfpC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,aACfpC,EAAAC,EAAAC,cAAA,OAAKkC,UAAW,aAAa4F,IAP3B,mCAQEhI,EAAAC,EAAAC,cAAA,OAAKkC,UAAW,aAAavD,EAAKgK,gBAEtC7I,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,YAAf,SACApC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQkC,UAAW,cAAnB,aAEJpC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,aAAavD,EAAKoE,SACjCjD,EAAAC,EAAAC,cAAA,WACDF,EAAAC,EAAAC,cAAA,YAECF,EAAAC,EAAAC,cAAA,WAC4B,iBAAhBrB,EAAKiK,SACb9I,EAAAC,EAAAC,cAAA,WAEQrB,EAAKiK,SAAS/E,IAAI,SAACgF,EAAWC,GAAZ,OAClBhJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAA,gBAGI,iBA9DRK,qBCqBb0I,mLAtBP,OACEjJ,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,kBACfpC,EAAAC,EAAAC,cAACgJ,EAAA,EAAD,CAAOC,QAASnJ,EAAAC,EAAAC,cAAA,UAAQkC,UAAU,iBAAlB,qBACtBgH,OAAK,EACLC,sBAAoB,GACdrJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,QAAMoJ,OAAO,oBACXtJ,EAAAC,EAAAC,cAAA,YAAUuB,KAAK,UAAU8H,KAAK,KAAKC,KAAK,MAAM/B,YAAY,yBAC1DzH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,cAIVrC,EAAAC,EAAAC,cAAA,KAAGuE,KAAK,KAAR,QACAzE,EAAAC,EAAAC,cAAA,KAAGuE,KAAK,KAAR,QACAzE,EAAAC,EAAAC,cAAA,KAAGuE,KAAK,KAAR,gBAnBelE,aCiBdkJ,mLAXP,IAAMC,EAAW3J,EAAsByD,sBACzC,OACExD,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,QACfpC,EAAAC,EAAAC,cAACyJ,EAAD,CAAYlI,KAAQiI,IACpB1J,EAAAC,EAAAC,cAAC0J,EAAD,MACA5J,EAAAC,EAAAC,cAAC2J,EAAD,MACA7J,EAAAC,EAAAC,cAAC4J,EAAD,cAToBvJ,aCmCbwJ,mLA5BP,OACI/J,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,WACXpC,EAAAC,EAAAC,cAAC8J,EAAA,EAAD,KACIhK,EAAAC,EAAAC,cAAAF,EAAAC,EAAA6E,SAAA,KACI9E,EAAAC,EAAAC,cAAC+J,EAAD,MACAjK,EAAAC,EAAAC,cAACgK,EAAA,EAAD,KACIlK,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOgK,KAAK,IAAIC,OAAK,EAACxD,UAAWpG,IACjCR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOgK,KAAK,SAASvD,UAAWpG,IAChCR,EAAAC,EAAAC,cAACmK,EAAD,CAAoBF,KAAK,iBAAiBvD,UAAW5B,IACrDhF,EAAAC,EAAAC,cAACmK,EAAD,CAAoBF,KAAK,aAAavD,UAAWjB,IACjD3F,EAAAC,EAAAC,cAACmK,EAAD,CAAoBF,KAAK,SAASvD,UAAW/D,IAC7C7C,EAAAC,EAAAC,cAACmK,EAAD,CAAoBF,KAAK,UAAUvD,UAAW/B,IAE9C7E,EAAAC,EAAAC,cAACmK,EAAD,CAAoBF,KAAK,QAAQvD,UAAY0D,IAG7CtK,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOyG,UAAWrC,KAEtBvE,EAAAC,EAAAC,cAACqK,EAAD,gBApBFhK,aCoBPiK,gMAtBX,OACExK,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,OAEbpC,EAAAC,EAAAC,cAACuK,EAAD,cALUlK,cCGEmK,QACW,cAA7B5L,OAAO6L,SAASC,UAEe,UAA7B9L,OAAO6L,SAASC,UAEhB9L,OAAO6L,SAASC,SAASvF,MACvB,2DCZNwF,IAASC,OAAO9K,EAAAC,EAAAC,cAAC6K,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvJ,KAAK,SAAAwJ,GACjCA,EAAaC","file":"static/js/main.eb39b5f0.chunk.js","sourcesContent":["export const API_URL = 'http://localhost:8080'\nexport const JPA_API_URL = 'http://localhost:8080/jpa'\n","import axios from 'axios'\nimport { API_URL } from '../../Constants'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(`${API_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    executeJwtAuthenticationService(username, password) {\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username, password) {\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        //console.log('registerSuccessfulLogin')\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()","import React, { Component } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass AuthenticatedRoute extends Component {\n    render() {\n        if (AuthenticationService.isUserLoggedIn()) {\n            return <Route {...this.props} />\n        } else {\n            return <Redirect to=\"/login\" />\n        }\n\n    }\n}\n\nexport default AuthenticatedRoute","import React, { Component } from 'react'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass LoginComponent extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            username: 'sept',\n            password: '',\n            hasLoginFailed: false,\n            showSuccessMessage: false\n        }\n        // this.handleUsernameChange = this.handleUsernameChange.bind(this)\n        // this.handlePasswordChange = this.handlePasswordChange.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.loginClicked = this.loginClicked.bind(this)\n    }\n\n    handleChange(event) {\n        //console.log(this.state);\n        this.setState(\n            {\n                [event.target.name]\n                    : event.target.value\n            }\n        )\n    }\n\n    // handleUsernameChange(event) {\n    //     console.log(event.target.name);\n    //     this.setState(\n    //         {\n    //             [event.target.name]\n    //               :event.target.value\n    //         }\n    //     )\n    // }\n\n    // handlePasswordChange(event) {\n    //     console.log(event.target.value);\n    //     this.setState({password:event.target.value})\n    // }\n\n    loginClicked() {\n        //sept,dummy\n        // if(this.state.username==='sept' && this.state.password==='dummy'){\n        //     AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\n        //     this.props.history.push(`/welcome/${this.state.username}`)\n        //     //this.setState({showSuccessMessage:true})\n        //     //this.setState({hasLoginFailed:false})\n        // }\n        // else {\n        //     this.setState({showSuccessMessage:false})\n        //     this.setState({hasLoginFailed:true})\n        // }\n\n        // AuthenticationService\n        // .executeBasicAuthenticationService(this.state.username, this.state.password)\n        // .then(() => {\n        //     AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\n        //     this.props.history.push(`/welcome/${this.state.username}`)\n        // }).catch( () =>{\n        //     this.setState({showSuccessMessage:false})\n        //     this.setState({hasLoginFailed:true})\n        // })\n        AuthenticationService\n            .executeJwtAuthenticationService(this.state.username, this.state.password)\n            .then((response) => {\n                AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token)\n                this.props.history.push(`/welcome/${this.state.username}`)\n            }).catch(() => {\n                this.setState({ showSuccessMessage: false })\n                this.setState({ hasLoginFailed: true })\n            })\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Login</h1>\n                <div className=\"container\">\n                    {/*<ShowInvalidCredentials hasLoginFailed={this.state.hasLoginFailed}/>*/}\n                    {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid Credentials or something is wrong</div>}\n                    {this.state.showSuccessMessage && <div>Login Sucessful</div>}\n                    {/*<ShowLoginSuccessMessage showSuccessMessage={this.state.showSuccessMessage}/>*/}\n                    User Name: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\n                    Password: <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n                    <button className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LoginComponent","import axios from 'axios'\nimport { API_URL, JPA_API_URL } from '../../Constants'\n\nclass TodoDataService {\n\n    retrieveAllTodos(name) {\n        //console.log('executed service')\n        return axios.get(`${JPA_API_URL}/users/${name}`);\n    }\n\n    retrieveTodo(name, id) {\n        //console.log('executed service')\n        return axios.get(`${JPA_API_URL}/users/${name}/todos/${id}`);\n    }\n\n    deleteTodo(name, id) {\n        //console.log('executed service')\n        return axios.delete(`${JPA_API_URL}/users/${name}/todos/${id}`);\n    }\n\n    updateTodo(name, id, todo) {\n        //console.log('executed service')\n        return axios.put(`${JPA_API_URL}/users/${name}/todos/${id}`, todo);\n    }\n\n    createTodo(name, todo) {\n        //console.log('executed service')\n        return axios.post(`${JPA_API_URL}/users/${name}/todos/`, todo);\n    }\n\n}\n\nexport default new TodoDataService()","import React, { Component } from 'react'\nimport TodoDataService from '../../api/todo/TodoDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\nimport moment from 'moment'\n\nclass ListTodosComponent extends Component {\n    constructor(props) {\n        console.log('constructor')\n        super(props)\n        this.state = {\n            todos: [],\n            message: null\n        }\n        this.deleteTodoClicked = this.deleteTodoClicked.bind(this)\n        this.updateTodoClicked = this.updateTodoClicked.bind(this)\n        this.addTodoClicked = this.addTodoClicked.bind(this)\n        this.refreshTodos = this.refreshTodos.bind(this)\n    }\n\n    componentWillUnmount() {\n        console.log('componentWillUnmount')\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('shouldComponentUpdate')\n        console.log(nextProps)\n        console.log(nextState)\n        return true\n    }\n\n    componentDidMount() {\n        console.log('componentDidMount')\n        this.refreshTodos();\n        console.log(this.state)\n    }\n\n    refreshTodos() {\n        let username = AuthenticationService.getLoggedInUserName()\n        TodoDataService.retrieveAllTodos(username)\n            .then(\n                response => {\n                    //console.log(response);\n                    this.setState({ todos: response.data })\n                }\n            )\n    }\n\n    deleteTodoClicked(id) {\n        let username = AuthenticationService.getLoggedInUserName()\n        //console.log(id + \" \" + username);\n        TodoDataService.deleteTodo(username, id)\n            .then(\n                response => {\n                    this.setState({ message: `Delete of todo ${id} Successful` })\n                    this.refreshTodos()\n                }\n            )\n\n    }\n\n    addTodoClicked() {\n        this.props.history.push(`/todos/-1`)\n    }\n\n    updateTodoClicked(id) {\n        console.log('update ' + id)\n        this.props.history.push(`/todos/${id}`)\n        // /todos/${id}\n        // let username = AuthenticationService.getLoggedInUserName()\n        // //console.log(id + \" \" + username);\n        // TodoDataService.deleteTodo(username, id)\n        //  .then (\n        //      response => {\n        //         this.setState({message : `Delete of todo ${id} Successful`})\n        //         this.refreshTodos()\n        //      }\n        //  )\n\n    }\n\n    render() {\n        console.log('render')\n        return (\n            <div>\n                <h1>List Todos</h1>\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Description</th>\n                                <th>Target Date</th>\n                                <th>IsCompleted?</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.todos.map(\n                                    todo =>\n                                        <tr key={todo.id}>\n                                            <td>{todo.description}</td>\n                                            <td>{moment(todo.targetDate).format('YYYY-MM-DD')}</td>\n                                            <td>{todo.done.toString()}</td>\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateTodoClicked(todo.id)}>Update</button></td>\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteTodoClicked(todo.id)}>Delete</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-success\" onClick={this.addTodoClicked}>Add</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListTodosComponent","import React from 'react'\n\nfunction ErrorComponent() {\n    return <div>An Error Occurred. I don't know what to do! Contact support at abcd-efgh-ijkl</div>\n}\n\nexport default ErrorComponent","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport AuthenticationService from './AuthenticationService.js'\n\n\nclass HeaderComponent extends Component {\n    render() {\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\n        //console.log(isUserLoggedIn);\n\n        return (\n            <header>\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n                    <div><a href=\"https://www.rmit.edu.au/\" className=\"navbar-brand\">RMIT</a></div>\n                    <ul className=\"navbar-nav\">\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/welcome/SEPT\">Home</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/todos\">Todos</Link></li>}\n\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/wall\"> Wall</Link></li>}\n\n                    </ul>\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\n                        {!isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/login\">Login</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\n                    </ul>\n                </nav>\n            </header>\n        )\n    }\n}\n\nexport default HeaderComponent\n","import React, { Component } from 'react'\n\nclass FooterComponent extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                <span className=\"text-muted\">All Rights Reserved 2019 @RMIT SEPT</span>\n            </footer>\n        )\n    }\n}\n\nexport default FooterComponent","import React, { Component } from 'react'\n\nclass LogoutComponent extends Component {\n    render() {\n        return (\n            <>\n                <h1>You are logged out</h1>\n                <div className=\"container\">\n                    Thank You for Using Our Application.\n                </div>\n            </>\n        )\n    }\n}\n\nexport default LogoutComponent","import axios from 'axios'\n\nclass HelloWorldService {\n\n    executeHelloWorldService() {\n        //console.log('executed service')\n        return axios.get('http://localhost:8080/hello-world');\n    }\n\n    executeHelloWorldBeanService() {\n        //console.log('executed service')\n        return axios.get('http://localhost:8080/hello-world-bean');\n    }\n\n    executeHelloWorldPathVariableService(name) {\n        //console.log('executed service')\n        // let username = 'sept'\n        // let password = 'dummy'\n\n        // let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n\n        return axios.get(`http://localhost:8080/hello-world/path-variable/${name}`\n            // , \n            //     {\n            //         headers : {\n            //             authorization: basicAuthHeader\n            //         }\n            //     }\n        );\n    }\n\n}\n\nexport default new HelloWorldService()","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport HelloWorldService from '../../api/todo/HelloWorldService.js'\n\nclass WelcomeComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this)\n        this.state = {\n            welcomeMessage: ''\n        }\n        this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this)\n        this.handleError = this.handleError.bind(this)\n    }\n\n    render() {\n        return (\n            <>\n                <h1>Welcome!</h1>\n                <div className=\"container\">\n                    Welcome {this.props.match.params.name}.\n                    You can manage your todos <Link to=\"/todos\">here</Link>.\n                </div>\n                <div className=\"container\">\n                    Click here to get a customized welcome message.\n                    <button onClick={this.retrieveWelcomeMessage}\n                        className=\"btn btn-success\">Get Welcome Message</button>\n                </div>\n                <div className=\"container\">\n                    {this.state.welcomeMessage}\n                </div>\n\n            </>\n        )\n    }\n\n    retrieveWelcomeMessage() {\n        // HelloWorldService.executeHelloWorldService()\n        // .then( response => this.handleSuccessfulResponse(response) )\n\n        // HelloWorldService.executeHelloWorldBeanService()\n        // .then( response => this.handleSuccessfulResponse(response) )\n\n        HelloWorldService.executeHelloWorldPathVariableService(this.props.match.params.name)\n            .then(response => this.handleSuccessfulResponse(response))\n            .catch(error => this.handleError(error))\n    }\n\n    handleSuccessfulResponse(response) {\n        console.log(response)\n        this.setState({ welcomeMessage: response.data.message })\n    }\n\n    handleError(error) {\n\n        console.log(error.response)\n\n        let errorMessage = '';\n\n        if (error.message)\n            errorMessage += error.message\n\n        if (error.response && error.response.data) {\n            errorMessage += error.response.data.message\n        }\n\n        this.setState({ welcomeMessage: errorMessage })\n    }\n\n}\n\n\nexport default WelcomeComponent","import React, { Component } from 'react'\nimport moment from 'moment'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport TodoDataService from '../../api/todo/TodoDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass TodoComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            description: '',\n            targetDate: moment(new Date()).format('YYYY-MM-DD')\n        }\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n\n    }\n\n    componentDidMount() {\n\n        if (this.state.id === -1) {\n            return\n        }\n\n        let username = AuthenticationService.getLoggedInUserName()\n\n        TodoDataService.retrieveTodo(username, this.state.id)\n            .then(response => this.setState({\n                description: response.data.description,\n                targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n            }))\n    }\n\n    validate(values) {\n        let errors = {}\n        if (!values.description) {\n            errors.description = 'Enter a Description'\n        } else if (values.description.length < 5) {\n            errors.description = 'Enter atleast 5 Characters in Description'\n        }\n\n        if (!moment(values.targetDate).isValid()) {\n            errors.targetDate = 'Enter a valid Target Date'\n        }\n\n        return errors\n\n    }\n\n    onSubmit(values) {\n        let username = AuthenticationService.getLoggedInUserName()\n\n        let todo = {\n            id: this.state.id,\n            description: values.description,\n            targetDate: values.targetDate\n        }\n\n        if (this.state.id === -1) {\n            TodoDataService.createTodo(username, todo)\n                .then(() => this.props.history.push('/todos'))\n        } else {\n            TodoDataService.updateTodo(username, this.state.id, todo)\n                .then(() => this.props.history.push('/todos'))\n        }\n\n        console.log(values);\n    }\n\n    render() {\n\n        let { description, targetDate } = this.state\n        //let targetDate = this.state.targetDate\n\n        return (\n            <div>\n                <h1>Todo</h1>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ description, targetDate }}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"description\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"targetDate\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Description</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Target Date</label>\n                                        <Field className=\"form-control\" type=\"date\" name=\"targetDate\" />\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TodoComponent","import React from 'react'\n\nconst Suggestions = (props) => {\n  const options = props.results.map(r => (\n    <li key={r.id}>\n      {r.name}\n    </li>\n  ))\n  return <ul>{options}</ul>\n}\n\nexport default Suggestions\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport Suggestions from './Suggestions.jsx'\n\nconst { API_KEY } = process.env\nconst API_URL = 'http://jsonplaceholder.typicode.com/posts'\n\nclass Search extends Component {\n  state = {\n    query: '',\n    results: []\n  }\n\n  getInfo = () => {\n    const user = {\n      name: this.state.query\n    }\n\n    axios.get(`https://jsonplaceholder.typicode.com/users`, {user})\n    .then(res => {\n      //const persons = res.data;\n      this.setState({results : res.data})\n    })\n  }\n\n  handleInputChange = () => {\n    this.setState({\n      query: this.search.value\n    }, () => {\n      if (this.state.query && this.state.query.length > 1) {\n        if (this.state.query.length % 2 === 0) {\n          this.getInfo()\n        }\n      }\n    })\n  }\n\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          placeholder=\"Search for...\"\n          ref={input => this.search = input}\n          onChange={this.handleInputChange}\n          value={this.state.query}\n        />\n        <button type=\"submit\" onClick={this.buttonClicked}>Search</button>\n        <Suggestions results={this.state.results} />\n      </form>\n    )\n  }\n}\n\nexport default Search\n","import React, {Component} from 'react'\nimport './HeaderWall.css'\nimport Search from './Search.jsx'\n\n\nclass HeaderWall extends Component {\n\n    constructor(props){\n        super(props);\n    }\n\n\n    render(){\n             return (\n                 \n            <header>\n                <nav className=\"wallnav\">\n                    <div className=\"wallLogo\">\n                        <a className =\"RMITWall\">RMITWall</a>\n                    </div>\n\n                    <div className=\"search\">\n                      {<Search/>}\n                    </div>\n\n                    <div className=\"Greetings\">\n                        Welcome, {this.props.name}\n                        <img className =\"profilePic\" src=\"http://placekitten.com/300/200\"></img>\n                    </div>\n                </nav>\n            </header>\n        )\n        }\n       \n    }\n\n\n\nexport default HeaderWall\n","import React, { Component } from 'react'\nimport './SideNavBar.css'\n\n\nclass SideNavBar extends Component {\n    render() {\n        return (\n            <div className=\"sidenav\">\n                <a href=\"#\">nav1</a>\n                <a href=\"#\">nav2</a>\n                <a href=\"#\">nav3</a>\n                <a href=\"#\">nav4</a>\n            </div>\n        )\n    }\n}\n\nexport default SideNavBar\n","import axios from 'axios'\nimport { API_URL, JPA_API_URL } from '../../Constants'\n var studentId=1;\nclass WallDataService {\n   \n\n\n    retrieveAllVisiblePosts(name) {\n        //console.log('executed service')\n        return axios.get(`${JPA_API_URL}/jpa/users/${name}/wall`);\n    }\n\n    //If the request is successful, a message advising the success is sent\n    //otherwise a bad requet is recieved and sent\n    /*\n    deletePost(name, id) {\n\n    \t//console.log('executed service')\n        return axios.get(`${JPA_API_URL}/users/${studentId}/Posts/${id}`, result);\n    }*/\n\n    //the new post is sent to the server. If the student Ids don't match\n    //a bad request is returned\n    createPost(name, post) {\n        //console.log('executed service')\n        return axios.post(`users/${studentId}/Posts`);\n    }\n\n    createComment(name, post, parentPostId) {\n    //console.log('executed service')\n        return axios.post(`${JPA_API_URL}/users/${studentId}/Posts/${parentPostId}`, post);\n    }\n\n    editPost(name, post) {\n    \treturn axios.post(`${JPA_API_URL}/users/${studentId}/Posts`, post);\n    }\n\n\n\n}\n\nexport default new WallDataService()","import axios from 'axios'\nimport { API_URL } from '../../Constants'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(`${API_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    executeJwtAuthenticationService(username, password) {\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username, password) {\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        //console.log('registerSuccessfulLogin')\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()","import React, {Component} from 'react'\n//import BottomBar from './BottomBar'\nimport './PostContainer.css'\n//import CommentBox from './CommentBox'\nimport WallDataService from '../../api/todo/WallDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\n\n\nclass PostContainer extends Component {\n\n    \n    constructor(props){\n        super(props);\n        this.state ={\n            error : null,\n            isLoaded: false,\n            posts:[]\n        };\n    }\n    \n    componentDidMount(){\n       let username = AuthenticationService.getLoggedInUserName()\n       WallDataService.retrieveAllVisiblePosts(username)\n        .then(res=>res.json())\n        .then(\n            (result)=>{\n                this.setState({\n                   isLoaded:true,\n                   posts:result\n                });\n            },\n            (error)=>{\n                this.setState({\n                    isLoaded:true,\n                    error\n                });\n            }\n        )\n    }\n\n    render(){\n        \n        const userImage = \"http://placekitten.com/300/200\"\n        return (\n                   <div>\n                   {\n                       this.state.posts.map((post,index)=>(\n                        <div className=\"postContainer\">\n                        <div className=\"userImage\">\n                        <img className =\"profilePic\" src={userImage}></img>\n                            <div className =\"timeStamp\">{post.creation_Time}</div>\n                        </div>\n                        <div className=\"userName\"> {/*post.UserName*/} </div>\n                        <div>\n                            <button className =\"editButton\">Edit/Del</button>\n                        </div>\n                        <div className=\"userInput\">{post.message}</div>\n                        <hr></hr>\n                       <div>{/*<BottomBar />*/}</div>\n                        \n                        <div>{\n                            (typeof(post.comments)=='object')? \n                            <div>\n                                {\n                                    post.comments.map((commentBox,indexb)=>\n                                    <div>\n                                        <hr></hr>\n                                <div>{/*<CommentBox commentbox={commentBox}/>*/}</div>\n                                    </div>)\n                                }\n                            </div>: null\n                        }</div>\n                    </div>\n                    ))\n                   }\n\n                    </div>\n               \n        );\n     }\n\n}\n\n\nexport default PostContainer ","import React, { Component } from 'react'\nimport './SideNavBar.css'\nimport Popup from \"reactjs-popup\";\n\n\nclass ActivityNavBar extends Component {\n\n    render() {\n        return (\n          <div className=\"activityNavBar\">\n          <Popup trigger={<button className=\"newPostButton\"> Create New Post </button>}\n    modal\n    closeOnDocumentClick>\n          <div>\n          <p>Create New Post</p>\n          <form action=\"/action_page.php\">\n            <textarea name=\"message\" rows=\"10\" cols=\"100\" placeholder=\"Write your status...\"></textarea>\n            <br/>\n            <input type=\"submit\"/>\n            </form>\n          </div>\n            </Popup>\n              <a href=\"#\">nav2</a>\n              <a href=\"#\">nav3</a>\n              <a href=\"#\">nav4</a>\n          </div>\n        )\n    }\n}\n\nexport default ActivityNavBar\n","import React, { Component } from 'react'\n\nimport HeaderWall from './HeaderWall';\nimport AuthenticationService from '../todo/AuthenticationService'\nimport SideNavBar from './SideNavBar';\nimport PostContainer from './PostContainer';\nimport ActivityNavBar from './ActivityNavBar'\n\nclass wallComponent extends Component {\n    \n    render() {\n        const userName = AuthenticationService.getLoggedInUserName();\n      return (\n        <div className=\"Wall\">\n        <HeaderWall name = {userName}/>\n        <SideNavBar />\n        <ActivityNavBar/>\n        <PostContainer/>\n        </div>\n      );\n    }\n  }\nexport default wallComponent;\n","import React, {Component} from 'react'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport AuthenticatedRoute from './AuthenticatedRoute.jsx'\nimport LoginComponent from './LoginComponent.jsx'\nimport ListTodosComponent from './ListTodosComponent.jsx'\nimport ErrorComponent from './ErrorComponent.jsx'\nimport HeaderComponent from './HeaderComponent.jsx'\nimport FooterComponent from './FooterComponent.jsx'\nimport LogoutComponent from './LogoutComponent.jsx'\nimport WelcomeComponent from './WelcomeComponent.jsx'\nimport TodoComponent from './TodoComponent.jsx'\nimport WallComponent from '../wall/WallComponent'\n\nclass TodoApp extends Component {\n    render() {\n        return (\n            <div className=\"TodoApp\">\n                <Router>\n                    <>\n                        <HeaderComponent/>\n                        <Switch>\n                            <Route path=\"/\" exact component={LoginComponent}/>\n                            <Route path=\"/login\" component={LoginComponent}/>\n                            <AuthenticatedRoute path=\"/welcome/:name\" component={WelcomeComponent}/>\n                            <AuthenticatedRoute path=\"/todos/:id\" component={TodoComponent}/>\n                            <AuthenticatedRoute path=\"/todos\" component={ListTodosComponent}/>\n                            <AuthenticatedRoute path=\"/logout\" component={LogoutComponent}/>\n\n                            <AuthenticatedRoute path=\"/wall\" component ={WallComponent}/>\n\n\n                            <Route component={ErrorComponent}/>\n                        </Switch>\n                        <FooterComponent/>\n                    </>\n                </Router>\n                {/*<LoginComponent/>\n                <WelcomeComponent/>*/}\n            </div>\n        )\n    }\n}\n\nexport default TodoApp\n","import React, { Component } from 'react';\n//import FirstComponent from './components/learning-examples/FirstComponent'\n//import SecondComponent from './components/learning-examples/SecondComponent'\n//import ThirdComponent from './components/learning-examples/ThirdComponent'\n//import Counter from './components/counter/Counter'\nimport TodoApp from './components/todo/TodoApp'\nimport './App.css';\nimport './bootstrap.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/*<Counter/>*/}\n        <TodoApp />\n      </div>\n    );\n  }\n}\n\n// class LearningComponents extends Component {\n//   render() {\n//     return (\n//       <div className=\"LearningComponents\">\n//          My Hello World\n//          <FirstComponent></FirstComponent>\n//          <SecondComponent></SecondComponent>\n//          <ThirdComponent></ThirdComponent>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}